import json
import requests
import time
import urllib
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize


# save these for future use, generated by Telegram
TOKEN = "492139688:AAEHwX-fLu2VKJJIIoWXf8OOhTNxBfmc-CQ"
URL = "https://api.telegram.org/bot{}/".format(TOKEN)

# helper functions for setting up
def get_url(url):
	response = requests.get(url)
	content = response.content.decode("utf8")
	return content
	
def get_json_from_url(url):
	content = get_url(url)
	js = json.loads(content)
	return js
	
	
# functions to handle updates (by id)
def get_updates(offset=None):
	url = URL + "getUpdates?timeout=100"
	if offset:
		url += "&offset={}".format(offset)
	js = get_json_from_url(url)
	return js
	
def get_last_update_id(updates):
	update_ids = []
	for update in updates["result"]:
		update_ids.append(int(update["update_id"]))
	return max(update_ids)
	
def get_last_chat_id_and_text(updates):
	num_updates = len(updates["result"])
	last_update = num_updates -1
	text = updates["result"][last_update]["message"]["text"]
	chat_id = updates["result"][last_update]["message"]["chat"]["id"]
	return(text,chat_id)
	
	
	
# actually sending responses, added keyboard function
def send_message(text,chat_id, reply_markup=None):
	text = urllib.parse.quote_plus(text)
	url = URL + "sendMessage?text={}&chat_id={}".format(text,chat_id)
	if reply_markup:
		url += "&reply_markup={}".format(reply_markup)
	get_url(url)
	
# building a keyboard to allow better input
def build_keyboard(items):
	keyboard = [[item] for item in items]
	reply_markup = {"keyboard":keyboard, "one_time_keyboard": True}
	return json.dumps(reply_markup)



def handle_updates(updates):
    
    stop_words = set(stopwords.words('english'))
    punctuation = ['.', ',', ';']
    
    for update in updates["result"]:
        try:
            text = update["message"]["text"]
            chat = update["message"]["chat"]["id"]

            pre_proc = [w for w in word_tokenize(text) if not w in stop_words and w not in punctuation]
            print(pre_proc)
            send_message(str(pre_proc),chat)
            
        except Exception as e:
            print(e) 

# commented out because we only needed it for echobot	
#def echo_all(updates):
#	for update in updates["result"]:
#		try:
#			text = update["message"]["text"]
#			chat = update["message"]["chat"]["id"]
#			send_message(text,chat)
#		except Exception as e:
#			print(e)

# instead use this function now, with added functionality of keyboard use
#def handle_updates(updates):
#	for update in updates["result"]:
#		try:
#			text = update["message"]["text"]
#			chat = update["message"]["chat"]["id"]
#			items = db.get_items(chat)
#			if text == "/done":
#				keyboard = build_keyboard(items)
#				send_message("Select an item to delete", chat, keyboard)
#			elif text == "/start":
#				send_message("Welcome to your To do list! Send any text to me and I'll store it as an item. Send /done to remove items", chat)
#			elif text.startswith("/"):
#				continue
#			elif text in items:
#				db.delete_item(text,chat)
#				items = db.get_items(chat)
#				keyboard = build_keyboard(items)
#				send_message("Select an item to delete", chat, keyboard)
#			else:
#				db.add_item(text,chat)
#				items = db.get_items(chat)
#			message = "\n".join(items)
#			send_message(message,chat)
#		except KeyError:
#			pass

# main method		
def main():
	last_update_id = None
	while True:
		updates = get_updates(last_update_id)
		if len(updates["result"]) > 0:
			last_update_id = get_last_update_id(updates) +1
			handle_updates(updates)
		time.sleep(0.5)

# calls the main method when script is executed
if __name__ == '__main__':
	main()

