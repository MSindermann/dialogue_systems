import json
import requests
import time
import urllib
from nltk.corpus import stopwords
from nltk import word_tokenize, pos_tag
import random



# save these for future use, generated by Telegram
TOKEN = "492139688:AAEHwX-fLu2VKJJIIoWXf8OOhTNxBfmc-CQ"
URL = "https://api.telegram.org/bot{}/".format(TOKEN)

plan_flag = 0

# helper functions for setting up
def get_url(url):
	response = requests.get(url)
	content = response.content.decode("utf8")
	return content
	
def get_json_from_url(url):
	content = get_url(url)
	js = json.loads(content)
	return js
		
# functions to handle updates (by id)
def get_updates(offset=None):
	url = URL + "getUpdates?timeout=100"
	if offset:
		url += "&offset={}".format(offset)
	js = get_json_from_url(url)
	return js
	
def get_last_update_id(updates):
	update_ids = []
	for update in updates["result"]:
		update_ids.append(int(update["update_id"]))
	return max(update_ids)
	
def get_last_chat_id_and_text(updates):
	num_updates = len(updates["result"])
	last_update = num_updates -1
	text = updates["result"][last_update]["message"]["text"]
	chat_id = updates["result"][last_update]["message"]["chat"]["id"]
	return(text,chat_id)
	
################################################################################

	
# actually sending responses, added keyboard function
def send_message(text,chat_id, reply_markup=None):
	text = urllib.parse.quote_plus(text)
	url = URL + "sendMessage?text={}&chat_id={}".format(text,chat_id)
	if reply_markup:
		url += "&reply_markup={}".format(reply_markup)
	get_url(url)
	
# building a keyboard to allow better input
def build_keyboard(items):
	keyboard = [[item] for item in items]
	reply_markup = {"keyboard":keyboard, "one_time_keyboard": True}
	return json.dumps(reply_markup)

################################################################################

def handle_updates(updates):    
    for update in updates["result"]:
        try:
                
            text = update["message"]["text"]
            chat = update["message"]["chat"]["id"]

            if text == "/start":
                send_message("Welcome to the Mentoring Chatbot!", chat)
            elif text.lower() == "thank you":
                send_message("You are welcome. Goodbye.",chat)
            else:
                response = preprocessing(text)
                send_message(response,chat)
            
        except Exception as e:
            print(e)
            
################################################################################

def preprocessing(text):
    stop_words = set(stopwords.words('english'))
    punctuation = ['.', ',', ';']
    
    tagged = pos_tag(word_tokenize(text))
    pre_proc = [w for w in tagged if not w[0] in stop_words and not w[0] in punctuation]
    
    return find_plan(pre_proc)


def find_plan(text):
    GREETING_KEYWORDS = ("hello", "hi", "greetings", "hey",)
    APPLICATION_KEY = ("application", "applications", "status", "applied", "uni-assist", "applicant", )
    REQ_KEYWORDS = ("requirements", "deadline", "regulation", "regulations", )
    POS_KEYWORDS = ("yes", "right", "correct")
    
    plan = 0
    index = 0
    
    for w in text:
        if w[0].lower() in GREETING_KEYWORDS:
            plan = 1
            index = 1
        if w[0].lower() in APPLICATION_KEY:
            plan = 2
            index = 1
        if w[0].lower() in REQ_KEYWORDS:
            plan = 3
            index = 1
        if w[0].lower() in POS_KEYWORDS:
            index = 2
            
                    
    return handle_plan(plan,index)

#############################################################################################
def handle_plan(plan,index):
    response = "I'm very sorry, but I don't understand. No.: " + str(plan)
    
    GREETING_RESPONSES = ["Hello! How can I help you?", "Hey! Can I do something for you?", 
                          "Greetings! Please specify how I can help you",]
    APPLICATION_RES = ["So your question regards your application status?", 
                       "Do you have a problem with your application?"]
    if index == 1:
        if plan == 1:
            response = random.choice(GREETING_RESPONSES)
            plan_flag = 1
        if plan == 2:
            response = APPLICATION_RES[index]
            plan_flag = 2
    else:
        plan = plan_flag
         
    return response
    
# commented out because we only needed it for echobot	
#def echo_all(updates):
#	for update in updates["result"]:
#		try:
#			text = update["message"]["text"]
#			chat = update["message"]["chat"]["id"]
#			send_message(text,chat)
#		except Exception as e:
#			print(e)

# main method		
def main():
	last_update_id = None
	while True:
		updates = get_updates(last_update_id)
		if len(updates["result"]) > 0:
			last_update_id = get_last_update_id(updates) +1
			handle_updates(updates)
		time.sleep(0.5)

# calls the main method when script is executed
if __name__ == '__main__':
	main()

